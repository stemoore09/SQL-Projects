/*
Inner Joins
*/

INNER JOIN = JOIN

Syntax: SELECT table1.column_name, table2.column_name
        FROM table1
        JOIN table2
        ON table1.PK_column_name = table2.FK_column_name

        1.) The table name is always before the period.
        2.) The column you want from that table is always after the period.
        3.) The ordering of which table name goes first in the ON statement doesn't matter.


*Inner Join Venn Diagram*

        --Left Circle represents the table in the FROM Clause
        --Right Circle represents the table in the JOIN Clause
        --Overlapping Middle Section represents all rows where the ON statement is true


        [If you have two or more columns in your SELECT that have the same name after the table name such as accounts.name
        [and sales_reps.name you will need to alias them. Otherwise it will only show one of the columns.
        [You can alias them like accounts.name AS AcountName, sales_rep.name AS SalesRepName



--Try pulling all the data from the accounts table, and all the data from the orders table.
--The match is the Accounts ID which are included in both tables linking the information.
--Account ID in the Accounts Table = ID; The Account ID in the Orders Table = Account_ID. 

SELECT accounts.*,orders.*
FROM accounts
JOIN orders
ON accounts.id=orders.account_id;

--Try pulling standard_qty, gloss_qty, and poster_qty from the orders table, and the website and the primary_poc from the accounts table.
--The match is the Accounts ID which are included in both tables linking the information.
--Account ID in the Accounts Table = ID; The Account ID in the Orders Table = Account_ID. 

SELECT orders.standard_qty,orders.gloss_qty,orders.poster_qty,accounts.website,accounts.primary_poc
FROM accounts
JOIN orders
ON orders.account_id=accounts.id;

--Try pulling channel column from the web_events table, the name column from the accounts table & total orders from the orders tables.
--This query is pulling various columns from more than 2 tables using the same syntax logic. 

SELECT web_events.channel, accounts.name, orders.total
FROM web_events
JOIN accounts
ON web_events.account_id = accounts.id
JOIN orders
ON accounts.id = orders.account_id;


--Provide a table for all web_events associated with account name of Walmart. There should be three columns.
--Be sure to include the primary_poc, time of the event, and the channel for each event. 
--Additionally, you might choose to add a fourth column to assure only Walmart events were chosen.
  
SELECT a.primary_poc, w.occurred_at, w.channel, a.name
FROM web_events w
JOIN accounts a
ON w.account_id = a.id
WHERE a.name = 'Walmart';

vs. with no aliases

SELECT accounts.primary_poc, accounts.name, web_events.channel, web_events.occurred_at
FROM web_events
JOIN accounts
ON web_events.account_id = accounts.id
WHERE accounts.name = 'Walmart';

--Provide a table that provides the region for each sales_rep along with their associated accounts.
--Your final table should include three columns: the region name, the sales rep name, and the account name.
--Sort the accounts alphabetically (A-Z) according to account name.
--If we don't name each column in our select statement, the query will return all the results in one row.
--We are creating rows in our returned query by adding alias's to each of the columns we are selecting.

SELECT sales_reps.name rep,region.name regoion,accounts.name account
FROM sales_reps
JOIN region
ON sales_reps.region_id=region.id
JOIN accounts
ON accounts.sales_rep_id=sales_reps.id
ORDER BY accounts.name;

vs. ADDING ALIAS'

SELECT r.name region, s.name rep, a.name account
FROM sales_reps s
JOIN region r
ON s.region_id = r.id
JOIN accounts a
ON a.sales_rep_id = s.id
ORDER BY a.name;

--Provide the name for each region for every order, as well as the account name and the unit price they paid (total_amt_usd/total) for the order.
--Your final table should have 3 columns: region name, account name, and unit price.
--A few accounts have 0 for total, so I divided by (total + 0.01) to assure not dividing by zero.
--To query this successfully the tables need to be joined in the correct order: Region > Sales_Reps > Accounts > Orders
--The ERD will show how the tables are linked to order successfully. 

SELECT a.name account, o.total_amt_usd/(total+0.01) unit_price, r.name region
FROM region r
JOIN sales_reps s
ON r.id = s.region_id
JOIN accounts a
ON a.sales_rep_id = s.id
JOIN orders o
ON a.id = o.account_id;


/*
Outer Joins
*/

        1.) LEFT OUTER JOIN = LEFT JOIN
        2.) RIGHT OUTER JOIN = RIGHT JOIN
        3.) FULL OUTER JOIN = OUTER JOIN

LEFT & RIGHT JOIN Are Functionally Equivalent. Using LEFT join is best practice. 

Syntax: SELECT tabl1.column_name1, table1.column_name2, table2.column_name3
        FROM left table 1
        LEFT JOIN right table 2
        
        --Results from this query will include all the matching rows from the right table 2, and the ones that did not match from the left table 1.

        [We are essentially JOINing the matching PK-FK links from the two tables, as we did before, but we are also pulling all the additional
        [rows from the Country table even if they don't have a match in the State table. Therefore, we obtain all the rows of the INNER JOIN,
        [but we also get additional rows from the table in the FROM.


/*
Joins & Filtering
*/

Syntax: SELECT ____, ___, ___
        FROM ___,
        LEFT JOIN ___,
        ON ___,
        AND ___ = ___ ; **vs** WHERE ___ = ___ ;
        
        --First query will process the filter first, then the ON resulting in all the rows, and marking the filtered data. (more rows returned)
        --Second query will process the ON first, then the filter, showing only the filtered accounts. (less rows returned)


