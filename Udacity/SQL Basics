/*
GROUP BY Examples
*/

--Write a query to return the 10 earliest orders in the orders table. Include the id, occurred_at, and total_amt_usd.

SELECT id,occurred_at,total_amt_usd
FROM orders
ORDER BY occurred_at asc
LIMIT 10;

--Write a query to return the top 5 orders in terms of largest total_amt_usd. Include the id, account_id, and total_amt_usd.
--Total_amt_usd column sorts from lowest to highest, so we will need to sort our query DESC to show the highest amount, and
  limit by 5 to show the top 5. 

SELECT id,account_id,total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC
LIMIT 5;

--Write a query to return the lowest 20 orders in terms of smallest total_amt_usd. Include the id, account_id, and total_amt_usd.

SELECT id,account_id,total_amt_usd
FROM orders
ORDER BY total_amt_usd
LIMIT 20;


/*
We can ORDER BY more than one column at a time. 
When you provide a list of columns in an ORDER BY command, the sorting occurs using the leftmost column in your list first,
then the next column from the left, and so on. We still have the ability to flip the way we order using DESC.
*/

--Write a query that displays the order ID, account ID, and total dollar amount for all the orders, sorted first by the account ID
  (in ascending order), and then by the total dollar amount (in descending order).
--This query will list account_id's in asc order, while the total_amt_usd will be listed in desc order for each account_id.
  
SELECT id,account_id,total_amt_usd
FROM orders
ORDER BY account_id,total_amt_usd DESC;

--Now write a query that again displays order ID, account ID, and total dollar amount for each order, but this time sorted
  first by total dollar amount (in descending order), and then by account ID (in ascending order).
  
SELECT id, account_id, total_amt_usd
FROM orders
ORDER BY total_amt_usd DESC, account_id;

/*
Compare the results of these two queries above. How are the results different when you switch the column you sort on first?
*/

"In query #1, all of the orders for each account ID are grouped together, and then within each of those groupings, the orders
appear from the greatest order amount to the least. In query #2, since you sorted by the total dollar amount first, the orders
appear from greatest to least regardless of which account ID they were from. Then they are sorted by account ID next.
(The secondary sorting by account ID is difficult to see here, since only if there were two orders with equal total dollar
amounts would there need to be any sorting by account ID.)"


/*
WHERE Examples
*/


> (greater than)

< (less than)

>= (greater than or equal to)

<= (less than or equal to)

= (equal to)

!= (not equal to) *not ISO Standard*

<> (not equal to) *ISO Standard*


--Pull the first 5 rows and all columns from the orders table that have a dollar amount of gloss_amt_usd greater than or equal to 1000.
--This query will show the first 5 acount_id's in asc order whose gloss_amt_usd is >= 1000.

SELECT *
FROM orders
WHERE gloss_amt_usd >= 1000
LIMIT 5;

--Pulls the first 10 rows and all columns from the orders table that have a total_amt_usd less than 500.

SELECT *
FROM orders
WHERE total_amt_usd < 500
LIMIT 10;

/*
You will notice when using these WHERE statements, we do not need to ORDER BY unless we want to actually order our data.
Our condition will work without having to do any sorting of the data.
*/
